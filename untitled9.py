# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cqqXRDAYgBB3NZw-LBwNKWdmiAgL3x54
"""

# Importing the libraries
import numpy as np
import pandas as pd
from numpy import math

from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

dataset=pd.read_csv('/content/drive/MyDrive/Capstone Projects/Almabetter capstone project/BIKE SHARING DEMAND PREDICTION R/BIKE DATA1.csv', encoding= 'ISO-8859â€“1')

dataset.head()

# Date columns to Date format conversion

dataset['Date']= pd.to_datetime(dataset['Date'])

# extracting day,month, day of week and weekdays/weekend from date column

dataset['Date']=pd.to_datetime(dataset['Date'])
dataset['month'] = dataset['Date'].apply(lambda x : x.month)
dataset['day_of_week'] = dataset['Date'].dt.day_name()
dataset['weekdays_weekend']=dataset['day_of_week'].apply(lambda x : 1 if x=='Saturday' or x=='Sunday' else 0 )
dataset=dataset.drop(columns=['day_of_week'],axis=1)

dataset.head()

# Numeric Features

numeric_features= dataset.select_dtypes(exclude='object')

#Extracting categorical features
categorical_features= dataset.select_dtypes(include='object')

#creating Dummy variable for categorical columns
dummy_categorical_feature= pd.get_dummies(categorical_features,drop_first=True)
dummy_categorical_feature

#concating numeric columns and dummy columns and creating final df
final_df= pd.concat([dummy_categorical_feature,numeric_features],axis=1)
final_df

final_df.info()

final_df['Seasons_Spring'] = final_df['Seasons_Spring'].astype('int')
final_df['Seasons_Summer'] = final_df['Seasons_Summer'].astype('int')
final_df['Seasons_Winter'] = final_df['Seasons_Winter'].astype('int')
final_df['Holiday_No Holiday'] = final_df['Holiday_No Holiday'].astype('int')
final_df['Functioning Day_Yes'] = final_df['Functioning Day_Yes'].astype('int')

X=final_df.drop(['Date','Rented Bike Count'],axis=1)
y = final_df['Rented Bike Count']

#spliting

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train,y_train)

pred = model.predict(X_train)
print(pred)

#model performance
from sklearn.metrics import r2_score, mean_squared_error
mse = mean_squared_error(y_train, pred)
r2 = r2_score(y_train, pred)#Best fit lineplt.scatter(x, y)
#plt.plot(x, pred, color = 'Black', marker = 'o')
print("MSE is", mse)
print("R SCORE is", r2)

import pickle

# create an iterator object with write permission - model.pkl
with open('LR_model', 'wb') as files:
    pickle.dump(model, files)

# load saved model
with open('LR_model' , 'rb') as f:
    lr = pickle.load(f)